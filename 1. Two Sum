# https://leetcode.com/problems/two-sum/description/

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        indicesMap = {}

        for index, x in enumerate(nums):
            to_find = target - x
            if to_find not in indicesMap:
                indicesMap[x] = index
            else: 
                return [indicesMap[to_find], index]
                
        

        # Time Complexity: O(n) and best case scenario is < O(n) because using only 1 loop to check 
        # and exit out of the loop. 

        # If additional space/memory constraint, then will go to brute force, which is 2 nested loops
        # as it is not creating any extra data structure.
